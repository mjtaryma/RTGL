// Copyright (c) 2021 Sultim Tsyrendashiev
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 460

#define DESC_SET_FRAMEBUFFERS   0
#define DESC_SET_GLOBAL_UNIFORM 1
#define DESC_SET_TEXTURES       2
#include "ShaderCommonGLSLFunc.h"

layout( local_size_x = COMPUTE_BLOOM_APPLY_GROUP_SIZE_X,
        local_size_y = COMPUTE_BLOOM_APPLY_GROUP_SIZE_Y,
        local_size_z = 1 ) in;

layout( constant_id = 0 ) const uint isSourcePing = 0;

#define EFFECT_SOURCE_IS_PING ( isSourcePing != 0 )
#include "EfCommon.inl"

vec3 sampleDirtTexture( vec2 uv )
{
    vec2 texsize    = vec2( getTextureSize( globalUniform.dirtMaskTextureIndex ) );
    vec2 rendersize = vec2( effect_getFramebufSize() );

    if( rendersize.x > rendersize.y )
    {
        float newy   = rendersize.x / float( texsize.x ) * float( texsize.y );
        float yscale = rendersize.y / newy;
        uv.y         = ( ( uv.y - 0.5 ) * yscale ) + 0.5;
    }
    else
    {
        float newx   = rendersize.y / float( texsize.y ) * float( texsize.x );
        float xscale = rendersize.x / newx;
        uv.x         = ( ( uv.x - 0.5 ) * xscale ) + 0.5;
    }

    return getTextureSampleLod( globalUniform.dirtMaskTextureIndex, uv, 0 ).rgb;
}

void main()
{
    const ivec2 pix = ivec2( gl_GlobalInvocationID.x, gl_GlobalInvocationID.y );
    const vec2  uv  = effect_getFramebufUV( pix );

    if( uv.x > 1.0 || uv.y > 1.0 )
    {
        return;
    }


    vec3 bloom =
        globalUniform.bloomIntensity * textureLod( framebufBloom_Result_Sampler, uv, 0 ).rgb;

    bloom += globalUniform.lensDirtIntensity * sampleDirtTexture( uv ) *
             textureLod( framebufBloom_Mip8_Sampler, uv, 0 ).rgb;

    vec3 c = effect_loadFromSource( pix ) + bloom;
    effect_storeToTarget( c, pix );
}