// Copyright (c) 2021 Sultim Tsyrendashiev
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 460
#extension GL_EXT_ray_tracing : require

// don't need "processAlbedo" function
#define MATERIAL_MAX_ALBEDO_LAYERS 0
#define MATERIAL_LIGHTMAP_LAYER_INDEX -1

// use getTriangleTexInfo instead of getTriangle
#define ONLY_LAYER0_TEXCOLOR

#define DESC_SET_GLOBAL_UNIFORM 2
#define DESC_SET_VERTEX_DATA 3
#define DESC_SET_TEXTURES 4
#include "ShaderCommonGLSLFunc.h"

hitAttributeEXT vec2 inBaryCoords;


#define ALPHA_THRESHOLD 0.5


void main()
{
	const ShTriangleTexInfo tr = getTriangleTexInfo(gl_InstanceID, gl_InstanceCustomIndexEXT, gl_GeometryIndexEXT, gl_PrimitiveID);

	const vec3 baryCoords = vec3(1.0f - inBaryCoords.x - inBaryCoords.y, inBaryCoords.x, inBaryCoords.y);
    const vec2 texCoord = tr.layerTexCoord_0 * baryCoords;

    // check only first material's albedo
    const vec4 color =
        getTextureSample( tr.layerColorTextures_0, texCoord ) *
        unpackUintColor( tr.layerColors_0 );

    // if must be discarded
	if ((color.r + color.g + color.b) / 3 * color.a + color.a < ALPHA_THRESHOLD)
	{
		// then ignore this intersection, so it won't be the closest hit
		ignoreIntersectionEXT;
	}

	// otherwise, do nothing, as this intersection 
	// can or can't be the closest hit
}
