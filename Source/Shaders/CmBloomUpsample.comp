// Copyright (c) 2021 Sultim Tsyrendashiev
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 460

// http://www.iryoku.com/next-generation-post-processing-in-call-of-duty-advanced-warfare

#define DESC_SET_FRAMEBUFFERS 0
#define DESC_SET_GLOBAL_UNIFORM 1
#include "ShaderCommonGLSLFunc.h"

layout(local_size_x = COMPUTE_BLOOM_UPSAMPLE_GROUP_SIZE_X, local_size_y = COMPUTE_BLOOM_UPSAMPLE_GROUP_SIZE_Y, local_size_z = 1) in;

// for upsampling, stepIndex is decreasing by 1 on each step
layout (constant_id = 0) const uint stepIndex = 0;

vec2 getInverseSrcSize()
{
    switch( stepIndex )
    {
        case 0: return 1.0 / vec2( imageSize( framebufBloom_Mip1 ) );
        case 1: return 1.0 / vec2( imageSize( framebufBloom_Mip2 ) );
        case 2: return 1.0 / vec2( imageSize( framebufBloom_Mip3 ) );
        case 3: return 1.0 / vec2( imageSize( framebufBloom_Mip4 ) );
        case 4: return 1.0 / vec2( imageSize( framebufBloom_Mip5 ) );
        case 5: return 1.0 / vec2( imageSize( framebufBloom_Mip6 ) );
        case 6: return 1.0 / vec2( imageSize( framebufBloom_Mip7 ) );
        default: return vec2( 1, 1 );
    }
}

vec2 getInverseUpsampledSize()
{
    switch( stepIndex )
    {
        case 0: return 1.0 / vec2( imageSize( framebufBloom ) );
        case 1: return 1.0 / vec2( imageSize( framebufBloom_Mip1 ) );
        case 2: return 1.0 / vec2( imageSize( framebufBloom_Mip2 ) );
        case 3: return 1.0 / vec2( imageSize( framebufBloom_Mip3 ) );
        case 4: return 1.0 / vec2( imageSize( framebufBloom_Mip4 ) );
        case 5: return 1.0 / vec2( imageSize( framebufBloom_Mip5 ) );
        case 6: return 1.0 / vec2( imageSize( framebufBloom_Mip6 ) );
        default: return vec2( 1, 1 );
    }
}

// get UV coords in [0..1] range
vec2 getSrcUV( const ivec2 upsampledPix )
{
    return ( vec2( upsampledPix ) + 0.5 ) * getInverseUpsampledSize();
}

vec3 getSample(sampler2D srcSampler, const vec2 uv)
{
    return textureLod(srcSampler, uv, 0).rgb;
}

vec3 filterTent3x3(sampler2D srcSampler, const vec2 centerUV)
{
    const vec2 invSrcSize = getInverseSrcSize();

    const vec2 offsets[] = 
    {
        vec2(-1,-1), vec2(0,-1), vec2(1,-1),
        vec2(-1, 0), vec2(0, 0), vec2(1, 0),
        vec2(-1, 1), vec2(0, 1), vec2(1, 1),
    };

    const float weights[] = 
    {
        1.0 / 16.0, 2.0 / 16.0, 1.0 / 16.0,
        2.0 / 16.0, 4.0 / 16.0, 2.0 / 16.0,
        1.0 / 16.0, 2.0 / 16.0, 1.0 / 16.0,
    };
    
    vec3 r = vec3(0.0);

    for (int i = 0; i < 9; i++)
    {
        r += weights[i] * getSample(srcSampler, centerUV + offsets[i] * invSrcSize);
    }

    return r;
}

void main()
{
    // each step upsamples source by 2
    const ivec2 upsampledPix = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    const vec2 srcUV = getSrcUV(upsampledPix);

    if (srcUV.x >= 1.0 || srcUV.y >= 1.0)
    {
        return;
    }

    switch (stepIndex)
    {
        case 6: imageStore(framebufBloom_Mip6,   upsampledPix, vec4(filterTent3x3(framebufBloom_Mip7_Sampler, srcUV), 0.0) + texelFetch( framebufBloom_Mip6_Sampler, upsampledPix, 0) ); break;
        case 5: imageStore(framebufBloom_Mip5,   upsampledPix, vec4(filterTent3x3(framebufBloom_Mip6_Sampler, srcUV), 0.0) + texelFetch( framebufBloom_Mip5_Sampler, upsampledPix, 0) ); break;
        case 4: imageStore(framebufBloom_Mip4,   upsampledPix, vec4(filterTent3x3(framebufBloom_Mip5_Sampler, srcUV), 0.0) + texelFetch( framebufBloom_Mip4_Sampler, upsampledPix, 0) ); break;
        case 3: imageStore(framebufBloom_Mip3,   upsampledPix, vec4(filterTent3x3(framebufBloom_Mip4_Sampler, srcUV), 0.0) + texelFetch( framebufBloom_Mip3_Sampler, upsampledPix, 0) ); break;
        case 2: imageStore(framebufBloom_Mip2,   upsampledPix, vec4(filterTent3x3(framebufBloom_Mip3_Sampler, srcUV), 0.0) + texelFetch( framebufBloom_Mip2_Sampler, upsampledPix, 0) ); break;
        case 1: imageStore(framebufBloom_Mip1,   upsampledPix, vec4(filterTent3x3(framebufBloom_Mip2_Sampler, srcUV), 0.0) + texelFetch( framebufBloom_Mip1_Sampler, upsampledPix, 0) ); break;
        case 0: imageStore(framebufBloom,        upsampledPix, vec4(filterTent3x3(framebufBloom_Mip1_Sampler, srcUV), 0.0)); break;
    }
}

#if COMPUTE_BLOOM_STEP_COUNT != 7
    #error Recheck COMPUTE_BLOOM_STEP_COUNT
#endif