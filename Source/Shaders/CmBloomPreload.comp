// Copyright (c) 2021 Sultim Tsyrendashiev
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 460

#define DESC_SET_FRAMEBUFFERS   0
#define DESC_SET_GLOBAL_UNIFORM 1
#define DESC_SET_TONEMAPPING    2
#include "ShaderCommonGLSLFunc.h"
#include "Exposure.h"

layout( local_size_x = COMPUTE_BLOOM_APPLY_GROUP_SIZE_X,
        local_size_y = COMPUTE_BLOOM_APPLY_GROUP_SIZE_Y,
        local_size_z = 1 ) in;

layout( constant_id = 0 ) const uint isSourcePing = 0;

#define EFFECT_SOURCE_IS_PING ( isSourcePing != 0 )
#include "EfCommon.inl"

void main()
{
    const ivec2 pix = ivec2( gl_GlobalInvocationID.x, gl_GlobalInvocationID.y );
    const ivec2 sz  = imageSize( framebufBloom );

    if( pix.x >= sz.x || pix.y >= sz.y )
    {
        return;
    }

    vec3 hdr = effect_loadFromSource( pix * 2 );

    vec3 bloom = hdr * ev100ToLuminance( globalUniform.bloomEV ) *
                 smoothstep( 0, globalUniform.bloomThreshold, getLuminance( hdr ) );

    imageStore(framebufBloom, pix, vec4(bloom, 0.0));
}