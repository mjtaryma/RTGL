// Copyright (c) 2022 Sultim Tsyrendashiev
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 460

#define DESC_SET_FRAMEBUFFERS   0
#define DESC_SET_GLOBAL_UNIFORM 1
#include "ShaderCommonGLSLFunc.h"

layout( local_size_x = COMPUTE_ANTIFIREFLY_GROUP_SIZE_X,
        local_size_y = COMPUTE_ANTIFIREFLY_GROUP_SIZE_X,
        local_size_z = 1 ) in;

#define FILTER_RADIUS 2
#define MAXFLOAT      1000000



const int SHARED_WIDTH = FILTER_RADIUS + COMPUTE_ANTIFIREFLY_GROUP_SIZE_X + FILTER_RADIUS;

struct Data
{
    vec3 diffuse;
    vec3 specular;
    vec3 indir;
};

shared Data s_data[ SHARED_WIDTH ][ SHARED_WIDTH ];

void fillFilterData( const ivec2 globalBasePix, const int sharedOffset )
{
    const ivec2 sharedPix = ivec2( sharedOffset % SHARED_WIDTH, sharedOffset / SHARED_WIDTH );
    const ivec2 globalPix = globalBasePix + sharedPix;

    Data data;
    data.diffuse  = texelFetchDiffTemporary( globalPix );
    data.specular = texelFetchSpecAccumColor( globalPix );
    data.indir    = texelFetchIndirAccum( globalPix );

    s_data[ sharedPix.y ][ sharedPix.x ] = data;
}

#define GET_SDATA( offsetX, offsetY )                                \
    ( s_data[ gl_LocalInvocationID.y + ( FILTER_RADIUS + offsetY ) ] \
            [ gl_LocalInvocationID.x + ( FILTER_RADIUS + offsetX ) ] )

void preload()
{
    const ivec2 globalBasePix =
        ivec2( gl_WorkGroupID.xy ) * COMPUTE_ANTIFIREFLY_GROUP_SIZE_X - ivec2( FILTER_RADIUS );
    const int threadIndex = int( gl_LocalInvocationIndex );

    const int sharedCount = SHARED_WIDTH * SHARED_WIDTH;
    const int threadCount = COMPUTE_ANTIFIREFLY_GROUP_SIZE_X * COMPUTE_ANTIFIREFLY_GROUP_SIZE_X;

    // how many threads should load only one pixel
    const int oneLoadCount = 2 * threadCount - sharedCount;
    // how many threads should load two pixels
    // const int twoLoadCount = sharedCount - threadCount;

    if( threadIndex < oneLoadCount )
    {
        // first threads need to preload only 1 pixel
        fillFilterData( globalBasePix, threadIndex );
    }
    else
    {
        // now threads are loading 2 neighboring pixels
        const int neighborsIndex = threadIndex - oneLoadCount;

        fillFilterData( globalBasePix, oneLoadCount + neighborsIndex * 2 + 0 );

        fillFilterData( globalBasePix, oneLoadCount + neighborsIndex * 2 + 1 );
    }
}



void main()
{
    if( globalUniform.antiFireflyEnabled == 0 )
    {
        const ivec2 pix = ivec2( gl_GlobalInvocationID );

        if( pix.x >= int( globalUniform.renderWidth ) || pix.y >= int( globalUniform.renderHeight ) )
        {
            return;
        }

        imageStore( framebufDiffAccumColor, pix, texelFetch( framebufDiffTemporary_Sampler,  pix, 0 ) );
        imageStore( framebufSpecPingColor,  pix, texelFetch( framebufSpecAccumColor_Sampler, pix, 0 ) );
        imageStore( framebufIndirPing,      pix, texelFetch( framebufIndirAccum_Sampler,     pix, 0 ) );
        return;
    }

    preload();
    barrier();


    const ivec2 pix = ivec2( gl_GlobalInvocationID );

    if( pix.x >= int( globalUniform.renderWidth ) || pix.y >= int( globalUniform.renderHeight ) )
    {
        return;
    }


    Data smin;
    smin.diffuse  = vec3( +MAXFLOAT );
    smin.specular = vec3( +MAXFLOAT );
    smin.indir    = vec3( +MAXFLOAT );

    Data smax;
    smax.diffuse  = vec3( -MAXFLOAT );
    smax.specular = vec3( -MAXFLOAT );
    smax.indir    = vec3( -MAXFLOAT );

    for( int i = -FILTER_RADIUS; i <= FILTER_RADIUS; i++ )
    {
        for( int j = -FILTER_RADIUS; j <= FILTER_RADIUS; j++ )
        {
            if( i == 0 && j == 0 )
            {
                continue;
            }

            const Data other = GET_SDATA( i, j );

            smin.diffuse  = min( smin.diffuse, other.diffuse );
            smin.specular = min( smin.specular, other.specular );
            smin.indir    = min( smin.indir, other.indir );

            smax.diffuse  = max( smax.diffuse, other.diffuse );
            smax.specular = max( smax.specular, other.specular );
            smax.indir    = max( smax.indir, other.indir );
        }
    }

    Data c     = GET_SDATA( 0, 0 );
    c.diffuse  = clamp( c.diffuse, smin.diffuse, smax.diffuse );
    c.specular = clamp( c.specular, smin.specular, smax.specular );
    c.indir    = clamp( c.indir, smin.indir, smax.indir );

    imageStoreDiffAccumColor( pix, c.diffuse );
    imageStoreSpecPingColor( pix, c.specular );
    imageStoreIndirPing( pix, c.indir );
}