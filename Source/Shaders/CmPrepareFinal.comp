// Copyright (c) 2021 Sultim Tsyrendashiev
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 460

#define DESC_SET_FRAMEBUFFERS 0
#define DESC_SET_GLOBAL_UNIFORM 1
#define DESC_SET_TONEMAPPING 2
#include "ShaderCommonGLSLFunc.h"
#include "LightGrid.h"
#include "Random.h"
#include "Exposure.h"

layout(local_size_x = COMPUTE_COMPOSE_GROUP_SIZE_X, local_size_y = COMPUTE_COMPOSE_GROUP_SIZE_Y, local_size_z = 1) in;

vec3 processDebug( const ivec2 pix, const vec3 fallback );

void main()
{
    const ivec2 pix = ivec2( gl_GlobalInvocationID.x, gl_GlobalInvocationID.y );
    if( pix.x >= uint( globalUniform.renderWidth ) || pix.y >= uint( globalUniform.renderHeight ) )
    {
        return;
    }

    vec3 hdr = texelFetch( framebufFinal_Sampler, pix, 0 ).rgb;
    if( !classicShading( pix ) )
    {
        // apply volumetrics
        {
            vec4 volumetric = texelFetch( framebufScattering_Sampler, pix, 0 );
            hdr             = hdr * volumetric.a + volumetric.rgb;
        }
        // auto exposure
        {
            hdr = hdr * ev100ToLuminousExposure( getCurrentEV100() );
        }
    }
    // screen emissive
    {
        vec3 screenEmis = texelFetch( framebufScreenEmission_Sampler, pix, 0 ).rgb;
        hdr = hdr + screenEmis * globalUniform.emissionMaxScreenColor;
    }

    if( globalUniform.debugShowFlags != 0 )
    {
        hdr = processDebug( pix, hdr );
    }

    imageStore( framebufFinal, pix, vec4( hdr, 0 ) );
}


vec3 processDebug(const ivec2 pix, const vec3 fallback)
{
    if ((globalUniform.debugShowFlags & DEBUG_SHOW_FLAG_MOTION_VECTORS) != 0)
    {
        const vec2 m = texelFetch(framebufMotion_Sampler, getCheckerboardPix(pix), 0).rg;
        return vec3(abs(m.r), abs(m.g), 0);
    }
    else if ((globalUniform.debugShowFlags & DEBUG_SHOW_FLAG_UNFILTERED_DIFFUSE) != 0)
    {
        return texelFetchUnfilteredDirect(getCheckerboardPix(pix));
    }
    else if ((globalUniform.debugShowFlags & DEBUG_SHOW_FLAG_UNFILTERED_SPECULAR) != 0)
    {
        return texelFetchUnfilteredSpecular(getCheckerboardPix(pix));
    }
    else if ((globalUniform.debugShowFlags & DEBUG_SHOW_FLAG_UNFILTERED_INDIRECT) != 0)
    {
        return texelFetchUnfilteredIndir(getCheckerboardPix(pix));
    }
#if LIGHT_GRID_ENABLED
    else if ((globalUniform.debugShowFlags & DEBUG_SHOW_FLAG_LIGHT_GRID) != 0)
    {
        vec3 surfPos = texelFetch(framebufSurfacePosition_Sampler, getCheckerboardPix(pix), 0).xyz;
       
        vec3 cell = vec3(worldToCell(surfPos));
        cell /= vec3(LIGHT_GRID_SIZE_X, LIGHT_GRID_SIZE_Y, LIGHT_GRID_SIZE_Z);

        vec3 c = mod(cell.xyz * 8, vec3(1.0));

        if (!isInsideCell(surfPos))
        {
            c = vec3(getLuminance(c) * 0.2 + 0.4);
        }

        return c;
    }
#endif
#if GRADIENT_ESTIMATION_ENABLED
    else if ((globalUniform.debugShowFlags & DEBUG_SHOW_FLAG_GRADIENTS) != 0)
    {
        return texelFetch(framebufDISPingGradient_Sampler, getCheckerboardPix(pix) / COMPUTE_ASVGF_STRATA_SIZE, 0).xyz;
    }
#endif
    else if( ( globalUniform.debugShowFlags & DEBUG_SHOW_FLAG_NORMALS ) != 0 )
    {
        vec3 n = texelFetchNormal( getCheckerboardPix( pix ) ).rgb;
        return ( n * 0.5 + 0.5 );
    }

    return fallback;
}
