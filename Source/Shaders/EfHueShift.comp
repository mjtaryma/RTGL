// Copyright (c) 2022 Sultim Tsyrendashiev
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 460

#include "EfSimple.inl"

// http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl
vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

void main()
{
    const ivec2 pix = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    
    if (!effect_isPixValid(pix))
    {
        return;
    }
    
    vec3 color = effect_loadFromSource(pix);

    vec3 albedo = vec3( 0 );
    if( !classicShading_Upscaled( pix ) )
    {
        // sample albedo, so dark places will be visible too
        const ivec2 rendPix =
            ivec2( effect_getFramebufUV( pix ) *
                   vec2( globalUniform.renderWidth, globalUniform.renderHeight ) );

        albedo = texelFetch( framebufAlbedo_Sampler, rendPix, 0 ).rgb;
    }

    // preserve luminance for HDR output
    const float hdrLuminance = getLuminance(color);

    float bw = hdrLuminance + getLuminance(albedo) * 0.4;
    bw = clamp(bw * 1.5, 0, 1);

    const float h_scale = 0.7;
    const float h_offset = 0.65;
    float h = mod(h_offset + bw * h_scale, 1.0);

    vec3 dst = hsv2rgb(vec3(h, 1, clamp(sqrt(bw)+0.1, 0, 1)));

    dst *= max( hdrLuminance, 1 );

    effect_storeToTarget(mix(color, dst, getProgress()), pix);
}