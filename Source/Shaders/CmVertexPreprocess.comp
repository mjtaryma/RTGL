// Copyright (c) 2021 Sultim Tsyrendashiev
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 460

#define VERTEX_BUFFER_WRITEABLE
#define DESC_SET_GLOBAL_UNIFORM 0
#define DESC_SET_VERTEX_DATA    1
#include "ShaderCommonGLSLFunc.h"

layout( local_size_x = COMPUTE_VERT_PREPROC_GROUP_SIZE_X, local_size_y = 1, local_size_z = 1 ) in;

layout( constant_id = 0 ) const uint preprocessMode = VERT_PREPROC_MODE_ONLY_DYNAMIC;

#define VERTEX_PREPROCESS_PARTIAL_DYNAMIC
#include "VertexPreprocessPartial.inl"
#undef VERTEX_PREPROCESS_PARTIAL_DYNAMIC

#define VERTEX_PREPROCESS_PARTIAL_STATIC
#include "VertexPreprocessPartial.inl"
#undef VERTEX_PREPROCESS_PARTIAL_STATIC

void main()
{
    const uint               tlasInstanceIndex = gl_WorkGroupID.x;
    const ShGeometryInstance inst              = geometryInstances[ tlasInstanceIndex ];

    const bool isDynamic = ( inst.flags & GEOM_INST_FLAG_IS_DYNAMIC ) != 0;

    if( preprocessMode == VERT_PREPROC_MODE_ONLY_DYNAMIC )
    {
        if( isDynamic )
        {
            convertForInstance_Dynamic(inst);
        }
    }
    // else if( preprocessMode == VERT_PREPROC_MODE_DYNAMIC_AND_MOVABLE ) {}
    else
    {
        if( isDynamic )
        {
            convertForInstance_Dynamic(inst);
        }
        else
        {
            convertForInstance_Static(inst);
        }
    }
}