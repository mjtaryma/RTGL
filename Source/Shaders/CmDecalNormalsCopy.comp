// Copyright (c) 2021 Sultim Tsyrendashiev
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 460

#define DESC_SET_FRAMEBUFFERS   0
#define DESC_SET_GLOBAL_UNIFORM 1
#include "ShaderCommonGLSLFunc.h"

layout( local_size_x = COMPUTE_DECAL_APPLY_GROUP_SIZE_X,
        local_size_y = COMPUTE_DECAL_APPLY_GROUP_SIZE_X,
        local_size_z = 1 ) in;

layout( constant_id = 0 ) const uint copyFromDecalToGbuffer = 0;

void main()
{
    const ivec2 pix             = ivec2( gl_GlobalInvocationID.x, gl_GlobalInvocationID.y );
    const ivec2 checkerboardPix = getCheckerboardPix( pix );

    if( pix.x >= uint( globalUniform.renderWidth ) || pix.y >= uint( globalUniform.renderHeight ) )
    {
        return;
    }

    if( copyFromDecalToGbuffer != 0 )
    {
        imageStore(
            framebufNormal, checkerboardPix, texelFetch( framebufNormalDecal_Sampler, pix, 0 ) );
        imageStore(
            framebufScreenEmisRT, pix, texelFetch( framebufScreenEmission_Sampler, pix, 0 ) );
    }
    else
    {
        imageStore(
            framebufNormalDecal, pix, texelFetch( framebufNormal_Sampler, checkerboardPix, 0 ) );
        imageStore(
            framebufScreenEmission, pix, texelFetch( framebufScreenEmisRT_Sampler, pix, 0 ) );
    }
}