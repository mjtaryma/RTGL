// Copyright (c) 2022 Sultim Tsyrendashiev
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 460

#define MATERIAL_MAX_ALBEDO_LAYERS    0
#define MATERIAL_LIGHTMAP_LAYER_INDEX -1

#define DESC_SET_TLAS           0
#define DESC_SET_FRAMEBUFFERS   1
#define DESC_SET_GLOBAL_UNIFORM 2
#define DESC_SET_VERTEX_DATA    3
#define DESC_SET_TEXTURES       4
#define DESC_SET_RANDOM         5
#define DESC_SET_LIGHT_SOURCES  6
#define DESC_SET_CUBEMAPS       7
#define DESC_SET_RENDER_CUBEMAP 8
#define DESC_SET_VOLUMETRIC     11
#define LIGHT_SAMPLE_METHOD     ( LIGHT_SAMPLE_METHOD_VOLUME )
#include "RaygenCommon.h"
#include "Volumetric.h"

// Approximation of Henyey-Greenstein's phase function
float phaseFunction_Schlick( const vec3 tolight, const vec3 toviewer, float assymetry )
{
    float costheta = dot( tolight, toviewer );
    float k = 1.55 * assymetry - 0.55 * assymetry * assymetry * assymetry;

#if SHIPPING_HACK
    k = min( k, 1.0 );
#endif

    return ( 1 - square( k ) ) / ( 4 * M_PI * square( 1 + k * costheta ) );
}

vec3 traceDirectIllumination_SpecificLight( const vec3 from, inout vec3 out_lightdirection )
{
    if( globalUniform.volumeLightSourceIndex != LIGHT_INDEX_NONE )
    {
        LightSample light =
            sampleLight( lightSources[ globalUniform.volumeLightSourceIndex ], from, vec2( 0 ) );

        vec3 radiance = light.dw * light.color;

        if( getLuminance( radiance ) > 0.0 )
        {
            bool isShadowed = traceShadowRay( 0, from, light.position, true );

            out_lightdirection = safeNormalize2( from - light.position, vec3( 0 ) );
            return radiance * float( !isShadowed );
        }
    }
    else if( globalUniform.volumeFallbackSrcExists != 0 )
    {
        bool isShadowed = traceShadowRay(
            0, from, from - MAX_RAY_LENGTH * globalUniform.volumeFallbackSrcDirection.xyz, true );

        out_lightdirection = globalUniform.volumeFallbackSrcDirection.xyz;
        return globalUniform.volumeFallbackSrcColor.rgb * float( !isShadowed );
    }

    out_lightdirection = vec3( 0, -1, 0 );
    return vec3( 0 );
}

void main()
{
    const ivec3 cell = ivec3( gl_LaunchIDEXT.xyz );

    if( globalUniform.volumeEnableType != VOLUME_ENABLE_VOLUMETRIC )
    {
        imageStore( g_volumetric, cell, vec4( 0.0 ) );
#if ILLUMINATION_VOLUME
        if( globalUniform.illumVolumeEnable != 0 )
        {
            imageStore( g_illuminationVolume, cell, vec4( 0.0 ) );
        }
#endif
        return;
    }

    vec3       center   = volume_getCenter( cell );
    const vec3 toviewer = normalize( globalUniform.cameraPosition.xyz - center );

    {
        vec3  s      = volume_getCenter( cell + ivec3( 0, 0, 1 ) );
        vec3  radius = ( center - s ) * 0.5;
        uint  seed   = getRandomSeed( cell.xy, globalUniform.frameId );
        float rnd    = rndBlueNoise8( seed, 0 ).x * 2 - 1;
        center += radius * rnd;
    }

    vec3 lighting = globalUniform.volumeAmbient.rgb;
    vec3 radiance = vec3( 0.0 );

#if ILLUMINATION_VOLUME
    if( globalUniform.illumVolumeEnable != 0 )
    {
        vec3 radiance_Prev = imageLoad( g_illuminationVolume, cell ).rgb;
        if( any( isnan( radiance_Prev ) ) || any( isinf( radiance_Prev ) ) )
        {
            radiance_Prev = vec3( 0 );
        }

        uint seed =
            getRandomSeed( ivec2( cell.x + cell.z, cell.y + 19 * cell.z ), globalUniform.frameId );

        // TODO: processDirectIllumination without normals
        vec3 n = safeNormalize2( toviewer, vec3( 0, 1, 0 ) );

        Surface s;
        {
            s.position        = center;
            s.instCustomIndex = 0;
            s.roughness       = 1.0;
            s.normal          = n;
            s.albedo          = vec3( 1.0 );
            s.isSky           = false;
            s.specularColor   = vec3( 0.04 );
            s.toViewerDir     = toviewer;
        }

        vec3 tolight = vec3( 0, 1, 0 );

        radiance += processDirectIllumination( seed, s, 0, tolight ) * 4 * M_PI;
        radiance = mix( radiance_Prev, radiance, 0.05 );

        lighting += globalUniform.volumeLightMult * radiance *
                    phaseFunction_Schlick( tolight, toviewer, globalUniform.volumeAsymmetry );
    }
    else
#endif
    {
        vec3 lightdir;
        radiance += traceDirectIllumination_SpecificLight( center, lightdir );

        lighting += globalUniform.volumeLightMult * radiance *
                    phaseFunction_Schlick( -lightdir, toviewer, globalUniform.volumeAsymmetry );
    }


    float scattering = globalUniform.volumeScattering * 0.001;
    float absorbtion = 0.0;


    imageStore( g_volumetric, cell, vec4( lighting * scattering, scattering + absorbtion ) );

#if ILLUMINATION_VOLUME
    if( globalUniform.illumVolumeEnable != 0 )
    {
        imageStore( g_illuminationVolume, cell, vec4( radiance, 0.0 ) );
    }
#endif
}
