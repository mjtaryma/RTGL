// Copyright (c) 2021 Sultim Tsyrendashiev
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 460

#define LUMINANCE_EPS 0.001


#define DESC_SET_FRAMEBUFFERS 0
#define DESC_SET_GLOBAL_UNIFORM 1
#define DESC_SET_TONEMAPPING 2
#define TONEMAPPING_BUFFER_WRITEABLE
#include "ShaderCommonGLSLFunc.h"

layout(local_size_x = COMPUTE_LUM_HISTOGRAM_GROUP_SIZE_X, local_size_y = COMPUTE_LUM_HISTOGRAM_GROUP_SIZE_Y, local_size_z = 1) in;

#if COMPUTE_LUM_HISTOGRAM_BIN_COUNT != COMPUTE_LUM_HISTOGRAM_GROUP_SIZE_X * COMPUTE_LUM_HISTOGRAM_GROUP_SIZE_Y
    #error
#endif

shared uint histogramWorkGroup[COMPUTE_LUM_HISTOGRAM_GROUP_SIZE_X * COMPUTE_LUM_HISTOGRAM_GROUP_SIZE_Y];

float getInputLuminance( ivec2 pix )
{
    if( classicShading( pix ) )
    {
        return 0;
    }

    return getLuminance( texelFetch( framebufPreFinal_Sampler, pix, 0 ).rgb );
}

// c -- linear HDR color
uint getColorBin(float inputLum, float minLogLuminance, float maxLogLuminance)
{
    float inverseLogLuminanceRange = 1.0 / (maxLogLuminance - minLogLuminance);

    if (inputLum < LUMINANCE_EPS)
    {
        return 0;
    }

    float logLuminance = clamp((log2(inputLum) - minLogLuminance) * inverseLogLuminanceRange, 0.0, 1.0);

    // [0.0, 1.0] -> [1, 255]
    return uint(logLuminance * 254.0 + 1.0);
}

// https://bruop.github.io/exposure/
// http://www.alextardif.com/HistogramLuminance.html
// https://knarkowicz.wordpress.com/2016/01/09/automatic-exposure/

void main()
{
    // init all work group's bins as 0
    const uint wgBinIndex = gl_LocalInvocationIndex;
    histogramWorkGroup[wgBinIndex] = 0;

    groupMemoryBarrier();


    const ivec2 pix = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);

    if( pix.x < uint( globalUniform.renderWidth ) && pix.y < uint( globalUniform.renderHeight ) )
    {
        const uint colorBin = getColorBin( getInputLuminance( pix ),
                                           globalUniform.minLogLuminance,
                                           globalUniform.maxLogLuminance );
        atomicAdd( histogramWorkGroup[ colorBin ], 1 );
    }

    groupMemoryBarrier();


    // add the results of each bin in the current work group to global histogram;
    // assuming that the amount of bins == amount of invocations in work group
    const uint globalBinIndex = gl_LocalInvocationIndex;
    atomicAdd(tonemapping.histogram[globalBinIndex], histogramWorkGroup[wgBinIndex]);
}