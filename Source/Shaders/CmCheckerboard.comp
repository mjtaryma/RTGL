// Copyright (c) 2021 Sultim Tsyrendashiev
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 460

#define DESC_SET_FRAMEBUFFERS 0
#define DESC_SET_GLOBAL_UNIFORM 1
#include "ShaderCommonGLSLFunc.h"

layout(local_size_x = COMPUTE_COMPOSE_GROUP_SIZE_X, local_size_y = COMPUTE_COMPOSE_GROUP_SIZE_Y, local_size_z = 1) in;

bool isLeftOutOfBounds(int checkerboardPix_X)
{
    return 
        checkerboardPix_X == 0 ||
        checkerboardPix_X == getCheckerboardSeparatorX(); 
}

bool isRightOutOfBounds(int checkerboardPix_X)
{
    return 
        checkerboardPix_X == getCheckerboardSeparatorX() ||
        checkerboardPix_X == int(globalUniform.renderWidth);
}

vec3 resolveCheckerboard( sampler2D src, const ivec2 regularPix, const ivec2 checkerboardPix, const vec3 center )
{
    vec3 crossColor =
        0.25 * texelFetch( src, regularPix + ivec2( -1,  0 ), 0 ).rgb * float( !isLeftOutOfBounds( checkerboardPix.x ) ) +
        0.25 * texelFetch( src, regularPix + ivec2(  1,  0 ), 0 ).rgb * float( !isRightOutOfBounds( checkerboardPix.x ) ) +
        0.25 * texelFetch( src, regularPix + ivec2(  0,  1 ), 0 ).rgb +
        0.25 * texelFetch( src, regularPix + ivec2(  0, -1 ), 0 ).rgb;

    return mix( center, crossColor, 0.5 );
}

void main()
{
    const ivec2 pix             = ivec2( gl_GlobalInvocationID.x, gl_GlobalInvocationID.y );
    const ivec2 checkerboardPix = getCheckerboardPix( pix );

    if( pix.x >= uint( globalUniform.renderWidth ) || pix.y >= uint( globalUniform.renderHeight ) )
    {
        return;
    }

    vec3 hdr  = texelFetch( framebufPreFinal_Sampler, pix, 0 ).rgb;
    vec3 emis = texelFetch( framebufScreenEmisRT_Sampler, pix, 0 ).rgb;

    if( needResolveCheckerboard( checkerboardPix ) )
    {
        hdr  = resolveCheckerboard( framebufPreFinal_Sampler, pix, checkerboardPix, hdr );
        emis = resolveCheckerboard( framebufScreenEmisRT_Sampler, pix, checkerboardPix, emis );
    }

    imageStore( framebufFinal, pix, vec4( hdr, 0 ) );
    imageStore( framebufScreenEmission, pix, vec4( emis, 0 ) );
}