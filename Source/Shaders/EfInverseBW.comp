// Copyright (c) 2022 Sultim Tsyrendashiev
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 460

#include "EfSimple.inl"

float getBW( vec3 color )
{
    return max( max( color.r, color.g ), color.b );
}

float sampleAlbedo( const ivec2 pix )
{
    const vec2 uv = effect_getFramebufUV( pix ) *
                        vec2( globalUniform.renderWidth, globalUniform.renderHeight ) -
                    vec2( globalUniform.jitterX, globalUniform.jitterY ); // try remove jitter

    const ivec2 rendPix = ivec2( uv );
    const vec2  uvfract = uv - vec2( rendPix );

    // bilinear
    float f0 = mix( getBW( texelFetch( framebufAlbedo_Sampler, rendPix + ivec2( 0, 0 ), 0 ).rgb ),
                    getBW( texelFetch( framebufAlbedo_Sampler, rendPix + ivec2( 1, 0 ), 0 ).rgb ),
                    uvfract.x );

    float f1 = mix( getBW( texelFetch( framebufAlbedo_Sampler, rendPix + ivec2( 1, 0 ), 0 ).rgb ),
                    getBW( texelFetch( framebufAlbedo_Sampler, rendPix + ivec2( 1, 1 ), 0 ).rgb ),
                    uvfract.x );

    return mix( f0, f1, uvfract.y );
}

float sobel( const ivec2 pix )
{
    // clang-format off
    const mat3 sobelKernel = mat3( 
       -1,-2,-1, 
        0, 0, 0, 
        1, 2, 1 );
    // clang-format on
    vec3 sobelSum = vec3( 0.0 );
    for( int i = -1; i <= 1; i++ )
    {
        for( int j = -1; j <= 1; j++ )
        {
            vec3 pixel = effect_loadFromSource( pix + ivec2( i, j ) ).rgb;
            sobelSum += pixel * sobelKernel[ i + 1 ][ j + 1 ];
        }
    }
    return length( sobelSum );
}

// from https://www.shadertoy.com/view/wl2SDt Created by loicvdb in 2019-09-03
float filmgrain( float col, vec2 fragCoord )
{
    float NoiseSeed =
        float( globalUniform.frameId ) * .003186154 + fragCoord.y * 17.2986546543 + fragCoord.x;
    NoiseSeed         = sin( NoiseSeed ) * 84522.13219145687;
    float randomFloat = fract( NoiseSeed );
    return .4 + randomFloat * 1.2;
}

void main()
{
    const ivec2 pix = ivec2( gl_GlobalInvocationID.x, gl_GlobalInvocationID.y );

    if( !effect_isPixValid( pix ) )
    {
        return;
    }

    vec3 color = effect_loadFromSource( pix );

    // sample albedo, so dark places will be visible too
    // gauss to smooth out low res albedo
    float fullbright = 0.0;
    for( int i = -1; i <= 1; i++ )
    {
        for( int j = -1; j <= 1; j++ )
        {
            fullbright = sampleAlbedo( pix + ivec2( i, j ) );
        }
    }
    fullbright /= 9;

    float bw = max( getBW( color ), fullbright );

    bw *= filmgrain( bw, effect_getFramebufUV( pix ) );

    bw = pow( bw, 0.2 );
    bw += sobel( pix );

    const int L = 32;
    bw          = clamp( int( bw * L ), 0, L ) / float( L );

    effect_storeToTarget( mix( color, vec3( 1 - bw ), getProgress() ), pix );
}